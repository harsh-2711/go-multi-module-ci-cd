name: Auto Build Packages

on:
  push:
    branches:
      - launchpad

jobs:
  setup-commit-hashes:
    if: github.event.sender.login != 'GitHub Action'
    runs-on: ubuntu-latest
    outputs:
      previous-commit-hash: ${{ steps.export_commit_hashes.outputs.PREVIOUS_COMMIT_HASH }}
      current-commit-hash: ${{ steps.export_commit_hashes.outputs.CURRENT_COMMIT_HASH }}

    steps:
    - name: Export commit hashes
      id: export_commit_hashes
      shell: bash
      run: |-
        PREVIOUS_COMMIT_HASH=${{ github.event.before }}
        CURRENT_COMMIT_HASH=${{ github.sha }}

        echo "Current commit: $CURRENT_COMMIT_HASH"
        echo "Commit to compare with: $PREVIOUS_COMMIT_HASH"

        echo "::set-output name=previous-commit-hash::$PREVIOUS_COMMIT_HASH"
        echo "::set-output name=current-commit-hash::$CURRENT_COMMIT_HASH"

  build-packages:
    needs: setup-commit-hashes
    runs-on: ubuntu-latest
    outputs:
      changed-packages: ${{ steps.changes.outputs.changed-packages }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      shell: bash
      run: |-
        PREVIOUS_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.previous-commit-hash }}
        CURRENT_COMMIT_HASH=${{ needs.setup-commit-hashes.outputs.current-commit-hash }}

        echo "::group::Detecting changed packages"
        CHANGED_PACKAGES=$(git diff --name-only $PREVIOUS_COMMIT_HASH..$CURRENT_COMMIT_HASH | grep '^packages/' | cut -d/ -f2 | sort -u || echo -n '')
        echo "Changed packages: $CHANGED_PACKAGES"
        echo "::endgroup::"

        echo "::set-output name=changed-packages::$CHANGED_PACKAGES"

    - name: Setup Go
      if: ${{ steps.changes.outputs.changed-packages != '' }}
      uses: actions/setup-go@v4
      with:
        go-version: '^1.20.0'

    - name: Setup Workspace
      if: ${{ steps.changes.outputs.changed-packages != '' }}
      shell: bash
      run: |-
        echo "$(go version)"
        make setup-workspace

    - name: Check builds
      if: ${{ steps.changes.outputs.changed-packages != '' }}
      shell: bash
      run: |-
        make build-all-packages

  create-packages-matrix:
    needs: build-packages
    if: ${{ needs.build-packages.outputs.changed-packages != '' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create_matrix.outputs.matrix }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create matrix
      id: create_matrix
      shell: bash
      run: |-
        packages=$(find packages -name go.mod -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
        echo "packages: $packages"
        echo "::set-output name=matrix::{\"package\": $packages}"

  tag-packages:
    needs: [create-packages-matrix, build-packages]
    if: ${{ needs.build-packages.outputs.changed-packages != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.create-packages-matrix.outputs.matrix) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        release_branches: main,launchpad # Update this
        default_bump: patch
        tag_prefix: ${{ matrix.package }}/v

    - name: Create a GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag_version.outputs.new_tag }}
        name: Release ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}

  sync-and-commit:
    needs: [tag-packages, build-packages]
    if: ${{ needs.build-packages.outputs.changed-packages != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Update package dependencies
      id: update_package_dependencies
      shell: bash
      run: |
        for folder in packages/*; do
          PACKAGE=${folder%/}
          LATEST_TAG=$(git describe --abbrev=0 --tags --match="$PACKAGE/*" 2>&1 | awk -F'/' '{print $NF}')
          make replace-deps module=$PACKAGE version=$LATEST_TAG
        done

    - name: Commit modified dependencies
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "chore: release new packages version" -a || exit 0

    - name: Push changes
      run: |
        git push
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
